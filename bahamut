#!/bin/bash

path=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)
action=""
network=""
version="v2.0.0"
github_version_count=0
kill_attempt_count=15
script_name="bahamut"
network_name="sahara oasis"
projects="execution consensus"
download_path="$path/download"

github_binaries="fastexlabs/binaries"
binaries_tags_url="https://api.github.com/repos/$github_binaries/tags"
binaries_releases_url="https://api.github.com/repos/$github_binaries/releases/tags/${version}"
genesis_url="https://github.com/${github_binaries}/raw/consensus-integration/genesis.ssz"
oasis_config_url="https://github.com/${github_binaries}/raw/consensus-integration/oasis_config.toml"
sahara_config_url="https://github.com/${github_binaries}/raw/consensus-integration/sahara_config.toml"
bahamut_script_url="https://github.com/${github_binaries}/raw/consensus-integration/${script_name}"

declare -A ports
ports=( [sahara.p2p-udp-port]=12000
        [sahara.p2p-tcp-port]=13000
        [sahara.grpc-gateway-port]=3500
        [sahara.rpc-port]=4000
        [sahara.authrpc]=8551
        [oasis.p2p-udp-port]=12001
        [oasis.p2p-tcp-port]=13001
        [oasis.grpc-gateway-port]=3501
        [oasis.rpc-port]=4001
        [oasis.authrpc]=8552 )

declare -A project_pids
for i in $projects; do
    pid=$(pidof $i | xargs pwdx 2>&1 | grep "$path" | cut -d: -f1)
    pid_path=$(pidof $i | xargs pwdx 2>&1 | grep "$path" | cut -d: -f2 | sed 's/^ *//')
    for j in $pid_path; do
        if [ "$path" == "$j" ]; then
            for c in $pid; do
                for f in $network_name; do
                    if ps -fp "$c" | grep "$f" > /dev/null 2>&1; then
                        project_pids["${f}_${i}_pid"]="$c"
                    fi
                done
            done
        fi
    done
done


oasis_bootstrap_node="--bootstrap-node="enr:-MK4QDW72KTjU2RcUd3SMUWz9vW9IHMCstEyiErHLnw5i-kIO0FHBYsSaV3xxYI8ynjGnRSutgfCqheaOVJ0dVlhFlKGAYoXK-y5h2F0dG5ldHOIAAAAAAAAAACEZXRoMpDMilfyAwAoWv__________gmlkgnY0gmlwhCPDPg2Jc2VjcDI1NmsxoQJINwhsm_QLHl4wLSJ2HptdrGc1DIFsNUrKxaFBADcZB4hzeW5jbmV0cwCDdGNwgjLIg3VkcIIu4A" --bootstrap-node="enr:-MK4QEAoUybSi3BMLP4Pig3-N02Um0ANaBOtFCGVWlvfeQb5GQrcIIFA9eQYUKtnkWHmDNf5Avqt0TNoTO-GHfZv4V-GAYoXN1lzh2F0dG5ldHOIAAAAAAAAAACEZXRoMpDMilfyAwAoWv__________gmlkgnY0gmlwhCJYh7mJc2VjcDI1NmsxoQMv3ezcnOCiGBm0PSnt7sgPVNDVZ1NAC1igDKWRlcBBe4hzeW5jbmV0cwCDdGNwgjLIg3VkcIIu4A" --bootstrap-node="enr:-MK4QPbEhAr_q9JW6U76VgZVdKyLhaVo82IDyuuTTQdHNzucPkdyWhVA15RSuH-SiPmUXjORtPS2f7msNbB-ynO_KzeGAYoXc4IFh2F0dG5ldHOIAAAAAAAAAACEZXRoMpDMilfyAwAoWv__________gmlkgnY0gmlwhCJYycmJc2VjcDI1NmsxoQJ4dFs_DPW7THGr7KfmuvdNUXLoFjZ1YfaPFUl89H8b0YhzeW5jbmV0cwCDdGNwgjLIg3VkcIIu4A""

function red()
{
    echo -e "\033[91m$1\033[0m"
}

function green()
{
    echo -e "\033[92m$1\033[0m"
}

function yellow()
{
    echo -e "\033[93m$1\033[0m"
}

function blue()
{
    echo -e "\033[94m$1\033[0m"
}

function error
{
    echo "$(red "Error: ")$1"
}

function warning
{
    echo "$(blue "Warning: ")$1"
}

function info
{
    echo "$(green "Info: ")$1"
}

function print_help
{
    #Name:
    echo "Name:"
    echo -e "\tThis script automatically sets up and runs Caravan - the Execution layer of Fastex chain (Bahamut) blockchain."
    echo -e "\tThe execution layer client that operates Fastex Chain is written in Go. Running the execution layer helps the user setup and maintain a Caravan node."
    echo -e "\tThe consensus layer is an implementation of the proof-of-stake-and-activity consensus specification." 
    #Usage:
    echo -e "\n"
    echo "Usage:"
    echo -e "\tbahamut OPTIONS [arguments]" 
    #Mandatory options:
    echo -e "\n"
    echo "Mandatory OPTIONS:"
    echo -e "\tinstall|start|stop|restart|status|update - Main action(s) to be performed."
    echo -e "\tstart - Starts the Caravan and Beacon-chain nodes"
    echo -e "\tstop - Stops the Caravan and Beacon-chain nodes."
    echo -e "\tstatus - Returns the current status of Caravan and beacon-chain."
    echo -e "\tinstall - Installs Caravan and Beacon-chain dependencies needed for the start."
    echo -e "\tupdate - Updates Caravan and Beacon-chain binaries and native scripts."
    echo -e "\t-n, --network - Necessary to connect to the network. Network can be Sahara (mainnet) or Oasis (testnet)."
    #Arguments:
    echo -e "\n"
    echo "arguments:"
    echo -e "\t--help, -h - Show help."
    echo -e "\t--version, -v - Manually set the binaries version. Default version is the latest version."
    #Examples:
    echo -e "\n"
    echo -e "Examples:"
    echo -e "\t- ./bahamut install"
    echo -e "\t- ./bahamut start -n=oasis"
    echo -e "\t- ./bahamut update --version v1.0.0"
    echo -e "\t- ./bahamut stop"
    echo -e "\t- ./bahamut restart"
    echo -e "\t- ./bahamut status"
    #Systemctl commands:
    echo -e "\n"
    echo -e "Systemctl commands examples:"
    echo -e "\tsudo systemctl start bahamut_oasis_execution.service - Start the Caravan node."
    echo -e "\tsudo systemctl stop bahamut_sahara_consensus.service - Stop the Beacon-chain node."
    echo -e "\tsudo systemctl restart bahamut_sahara_consensus.service - Restart the Beacon-chain node."
    echo -e "\tsudo systemctl status bahamut_oasis_execution.service - Show the Beacon-chain node status."
}

function check_network()
{
    if [ -z "$network" ]; then
        error "Network is mandatory option during start. Type --help or -h to see the correct options."
        exit 1
    fi
    if [  "mainnet" != "$network" ] && [ "oasis" != "$network" ] && [ "sahara" != "$network" ]; then
        error "Network name must be \"mainnet\",\"oasis\",\"sahara\"."
        exit 1
    fi
}

function check_action
{
    if ! [ -z "$action" ]; then
        error "Please specify only one of start|stop|status|restart|install|update options!!!"
        exit 1
    fi
}

function get_shift()
{
    if [[ $1 != *"="* ]]; then
        echo 2
    else
        echo 1
    fi
}

function get_option()
{
    if [[ $1 != *"="* ]]; then
        echo "$2"
    else
        echo "${1#*=}"
    fi
}

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            print_help
            exit 0
            ;;
        -n|--network|-n=*|--network=*)
            network=$(get_option $1 $2)
            shift $(get_shift $1)
            check_network
            ;;
        -v|--version|-v=*|--version=*)
            version=$(get_option $1 $2)
            shift $(get_shift $1)
            ((github_version_count=github_version_count + 1))
            ;;
        start|stop|status|restart|install|update)
            check_action
            action=$1
            shift
            ;;
        *)
            error "Unknown option $1. Type --help or -h to see the correct options."
            exit 1
            ;;
    esac
done

if [ -z "$action" ]; then
    error "Main action \"start\", \"stop\", \"status\", \"restart\", \"install\", \"update\" is missing!!!"
    info "For more details please use -h|--help option."
    exit 1
fi

##############################################
#This is done for users who ran the script on the mainnet
if [ -z "${project_pids["oasis_execution_pid"]}" ] && [ -z "${project_pids["sahara_execution_pid"]}" ] && [ -d "$path/Bahamut/mainnet" ]; then
    rm -rf $path/Bahamut/sahara
    mv $path/Bahamut/mainnet $path/Bahamut/sahara
fi

if [ "mainnet" == "$network" ]; then
    network="sahara"
fi
##############################################


function read_confirmation()
{
    OIFS=$IFS
    IFS='/'
    while [ true ]; do
        read -p "$1 [$2] " -r
        v=`echo "$REPLY" | tr '[:upper:]' '[:lower:]'`
        for x in $2; do
            c=`echo "$x" | tr '[:upper:]' '[:lower:]'`
            if [ "$c" == "$v" ]; then
                IFS=$OIFS
                echo $x
                return
            fi
        done
    done
}

function check_install_dependency
{
    if ! which openssl > /dev/null 2>&1; then
        error "The openssl is not found"
        exit 1     
    fi
    if ! which wget > /dev/null 2>&1; then
        error "The wget could not be found. You need to install wget to run the script."
        exit 1
    fi
    if ! which tr > /dev/null 2>&1; then
        error "The tr could not be found. You need to install tr to run the script."
        exit 1
    fi
    if ! which curl > /dev/null 2>&1; then
        error "The curl could not be found. You need to install curl to run the script."
        exit 1
    fi
}

function check_start_dependency
{
    for i in $projects; do
        if [ ! -f "$path/Bahamut/${i}" ]; then
            error "The ${i} file not found. Please do the following first ./bahamut install"
            exit 1
        fi
        if [ ! -x "$path/Bahamut/${i}" ]; then
            error "The ${i} is not executable. Please do the following first ./bahamut install"
            exit 1
        fi
    done
    if [ ! -f "$path/Bahamut/oasis/genesis.ssz" ]; then
        error "The genesis.ssz not found. Please do the following first ./bahamut install"
        exit 1
    fi
}

function check_stop_dependency_and_init
{
    if [ -z "$network" ]; then
        local c=0
        local n=""
        local p=$(pidof $projects)
        if [ ! -z "$p" ]; then
            for i in $network_name; do
                local o=$(ps -fp $p)
                if echo "$o" | grep -q $i; then
                    ((c=c+1))
                    n=$i
                fi
            done
        fi
        if [ 0 -eq $c ]; then
            info "There is no running process."
            exit 0
        elif [ $c -eq 1 ]; then
            network=$n
        else
            error "Sahara and Oasis are currently working. To restart, please indicate which network you want to ${action} example (./bahamut ${action} -n=oasis)."
            exit 1
        fi
    fi
}

function check_status_dependency
{
    if [ "${#project_pids[@]}" -eq 0 ]; then
        info "There is no running process."
        exit 0
    fi
}

function check_config
{
    for i in $network_name; do
        if [ ! -f $(get_config_file $i) ]; then
            info "The file $(get_config_name $i) do not exist. Please do the following first ./bahamut install"
            exit 0
        fi
    done
}

function check_update_dependency
{
    if [ ! -d $path/Bahamut ]; then
        error "Please do the following first ./bahamut install"
        exit 1
    fi
    for i in $network_name; do
        for j in $projects; do
            if [ ! -z "${project_pids["${i}_${j}_pid"]}" ]; then
                error "To update, it is necessary to stop the running processes. ./bahamut stop"
                exit 1
            fi
        done
    done
}

function check_versions_flag
{
    if [ $github_version_count -ge 2 ]; then
        error "The version flag cannot be specified more than once."
        exit 1
    fi
    if ! [[ "$version" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        error "Invalid github version number format. Please use the format (example v1.0.0)."
        exit 1
    else
        local t=$(curl -s "$binaries_tags_url" | grep -oP '"name": "\K[^"]+')
        if ! [[ $t =~ (^|[[:space:]])"$version"($|[[:space:]]) ]]; then
            error "The entered version was not found on github."
            exit 1
        fi
    fi
}

function read_confirmation_and_stop
{
    local c=$(read_confirmation "$(red "Do you want to ${action} running ${1} ${2} process?")" "Y/N")
    if [ "Y" == "$c" ]; then
        kill_process $1 $2 $3 "-15"
        `ps -p $3` > /dev/null 2>&1
        if [ 0 -eq $? ]; then
            kill_process $1 $2 $3 "-9"
        fi
    fi
}

function download_binaries_and_extract
{
    if [ "install" == "$action" ] && [ -x "$path/Bahamut/$1" ]; then
        info "The $1 binary is exist."
    else
        echo -ne $(info "Starting the process of downloading ${1} binaries file...")
        local j=$(curl -s -i -H "Accept: application/vnd.github.v3+json" "$binaries_releases_url")
        local u=$(grep browser_download_url <<< "$j" | sed 's/.*"browser_download_url": "\(.*\)"/\1/')
        for url in $u; do
            wget -P $download_path/ $u > /dev/null 2>&1
            if ! [ 0 -eq $? ]; then
                error "Failed to download the binaries."
                exit 1
            fi
        done
        echo " Done"
        echo -ne $(info "Starting the process of extract ${1} binaries file...")
        cd $download_path
        for file in $(ls | grep tar.gz); do
            tar -xzf $file > /dev/null 2>&1 && rm $file > /dev/null 2>&1
            if ! [ 0 -eq $? ]; then
                error "Failed to extract or remove the binaries file."
                exit 1
            fi
        done
        mv $download_path/$1 $path/Bahamut/ > /dev/null 2>&1
        echo " Done"
        cd - > /dev/null
    fi
}

function download_bahamut_script
{
    echo -ne $(info "Starting the process of downloading ${script_name} script...")
    wget -P $download_path/ $bahamut_script_url > /dev/null 2>&1
    if ! [ 0 -eq $? ]; then
        error "Failed to download the ${script_name} script."
        exit 1
    fi
    chmod +x $download_path/$script_name
    mv $download_path/$script_name $path > /dev/null 2>&1
    echo " Done"
}

function get_config_name
{
    echo "${1}_config.toml"
}

function get_config_file
{
    local n=$(get_config_name ${1})
    echo "$path/Bahamut/${1}/${n}"
}

function download_configurations
{
    local cf=$(get_config_file ${1})
    local cu=${1}_config_url
    if [ "install" == "$action" ] && [ -f "${cf}" ]; then
        info "The $1 config file is exist."
    else
        echo -ne $(info "Starting the process of downloading $(get_config_name ${1}) file...")
        wget -P $download_path/ ${!cu} > /dev/null 2>&1
        if ! [ 0 -eq $? ]; then
            error "Failed to download configs files."
            exit 1
        fi
        local n=$(get_config_name ${1})
        mv "$download_path/${n}" $path/Bahamut/${1}/ > /dev/null 2>&1
        echo " Done"
    fi
}

function download_genesis
{
    if [ -f $path/Bahamut/oasis/genesis.ssz ]; then
        info "The genesis.ssz file is exists."
    else
        echo -ne $(info "Starting the process of downloading genesis.ssz file...")
        wget -P $download_path/ $genesis_url > /dev/null 2>&1
        if ! [ 0 -eq $? ]; then
            error "Failed to download genesis.ssz file."
            exit 1
        fi
        mv "$download_path/genesis.ssz" $path/Bahamut/oasis/ > /dev/null 2>&1
        echo " Done"
    fi
}

function get_systemctl_files_path
{
    echo "/etc/systemd/system/bahamut_${1}_${2}.service"
}

function get_systemctl_execution_start
{
    echo "ExecStart=${path}/Bahamut/${2} --${1} --authrpc.jwtsecret=$path/Bahamut/${1}/datadirs/jwt.hex --config=$path/Bahamut/${1}/$(get_config_name ${1})"
}

function get_systemctl_consensus_start
{
    local o=""
    if [ "oasis" == "$network" ]; then
        o="--genesis-state $path/Bahamut/oasis/genesis.ssz ${oasis_bootstrap_node}"
    fi
    echo "ExecStart=${path}/Bahamut/${2} --execution-endpoint="http://127.0.0.1:${ports[${1}.authrpc]}" --p2p-udp-port ${ports[${1}.p2p-udp-port]} --p2p-tcp-port ${ports[${1}.p2p-tcp-port]} --grpc-gateway-port ${ports[${1}.grpc-gateway-port]} --rpc-port ${ports[${1}.rpc-port]} --accept-terms-of-use --p2p-static-id --${1} --datadir=$path/Bahamut/${1}/datadirs/${2} --jwt-secret=$path/Bahamut/${1}/datadirs/jwt.hex ${o}"
}

function generate_systemctl_files
{
    local u=$(whoami)
    local exec_start=$(get_systemctl_${2}_start ${1} ${2})
    local systemctl_file=$(get_systemctl_files_path ${1} ${2})
    local service_file_content="[Unit]
Description=The ${2} layer node

[Service]
WorkingDirectory=${path}
ExecStartPre=/bin/chmod +x ${path}/Bahamut/${2}
${exec_start}
User=${u}
Group=${u}
Type=simple
KillSignal=SIGINT
TimeoutStopSec=120
Restart=on-failure
RestartSec=10s

[Install]
WantedBy=multi-user.target"
    echo "$service_file_content" | sudo tee "${systemctl_file}" > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "Failed to create the file."
    fi
    echo -ne $(info "Starting the generate ${1} ${2} system file...")
    echo " Done"
}

function init_directory
{
    local f=false
    if [ ! -f "$path/Bahamut/oasis/datadirs/jwt.hex" ] || [ ! -f "$path/Bahamut/sahara/datadirs/jwt.hex" ]; then
        f=true
    fi
    for i in $network_name; do
        for j in $projects; do
            if [ "true" == "$f" ]; then
                rm -rf $path/Bahamut/${i}/datadirs/*
            fi
            mkdir -p $path/Bahamut/${i}/datadirs/${j}
            mkdir -p $path/Bahamut/${i}/log/${j}
        done
    done
    if [ "true" == "$f" ]; then
        echo -ne $(info "Starting the create jwt.hex files..")
        openssl rand -hex 32 | tr -d "\n" > $path/Bahamut/oasis/datadirs/jwt.hex
        openssl rand -hex 32 | tr -d "\n" > $path/Bahamut/sahara/datadirs/jwt.hex
        echo " Done"
    else
        info "The jwt.hex files exist."
    fi
    rm -rf $download_path
    mkdir -p $download_path
}

function init_systemctl
{
    c=$(read_confirmation "$(red "Would you like to run the script with systemctl")" "Y/N")
    if [ "Y" == "$c" ]; then
        info "This script requires root privileges."
        for i in $projects; do
            for j in $network_name; do
                service_file=${j}_${i}_system_file
                service_file_name="bahamut_${j}_${i}.service"
                if [ ! -f "${!service_file}" ]; then
                    generate_systemctl_files $j $i
                    sudo systemctl enable $service_file_name > /dev/null 2>&1
                else
                    info "The ${service_file_name} file is exist."
                fi
            done
        done
        info "The systemctl files are enables."
        info "Systemctl commands examples - sudo systemctl start/stop/restart/status bahamut_oasis_execution.service."
    else
        info "Deny operation with systemctel."
    fi
}

function install_function
{
    check_install_dependency
    check_versions_flag
    init_directory
    download_genesis
    for i in $network_name; do
        download_configurations $i
    done
    for i in $projects; do
        download_binaries_and_extract $i
    done
    rm -rf $download_path
    init_systemctl
}

function start_consensus
{
    local o=""
    if [ "oasis" == "$network" ]; then
        o="--genesis-state $path/Bahamut/oasis/genesis.ssz ${oasis_bootstrap_node}"
    fi
    echo -ne $(info "Starting the new ${network} ${1} process...")
    local beacon_chain_log_file="$path/Bahamut/${network}/log/consensus/${1}_`date +\"%Y_%m_%d_%T\"`"
    nohup $path/Bahamut/$1 ${o} \
        --execution-endpoint="http://127.0.0.1:${ports[${network}.authrpc]}" \
        --p2p-udp-port ${ports[${network}.p2p-udp-port]} \
        --p2p-tcp-port ${ports[${network}.p2p-tcp-port]} \
        --grpc-gateway-port ${ports[${network}.grpc-gateway-port]} \
        --rpc-port ${ports[${network}.rpc-port]} \
        --accept-terms-of-use \
        --p2p-static-id \
        --min-sync-peers 1 \
        --${network} \
        --datadir=$path/Bahamut/$network/datadirs/consensus \
        --jwt-secret=$path/Bahamut/${network}/datadirs/jwt.hex > $beacon_chain_log_file 2>&1 &
    echo " Done"
}

function start_execution
{
    echo -ne $(info "Starting the new ${network} ${1} process...")
    local execution_log_file="$path/Bahamut/${network}/log/${1}/${1}_`date +\"%Y_%m_%d_%T\"`"
    local config=$(get_config_file $network)
    nohup $path/Bahamut/$1 \
        --$network \
        --authrpc.jwtsecret=$path/Bahamut/${network}/datadirs/jwt.hex \
        --config ${config} > $execution_log_file 2>&1 &
    echo " Done"
}

function start_function
{
    check_network
    check_config
    check_start_dependency
    for i in $projects; do
        if [ "${project_pids[${network}_${i}_pid]}" ]; then
            error "The process $network ${i} is already started with pid="${project_pids[${network}_${i}_pid]}""
            continue
        else
            start_${i} ${i}
        fi
    done
}

function kill_process
{
    if [ "$3" ]; then
        local count=0
        echo -ne $(info "Stopping the ${1} ${2} process with pid=${3}...")
        kill $4 $3
        while ps -p $3 > /dev/null; do
            sleep 2
            ((count=count + 1))
            if [[ $count -ge $kill_attempt_count ]]; then
                echo -ne $(info "The ${1} ${2} process does not shut down. Please wait...")
                break
            fi
        done
        echo " Done"
    fi
}

function stop_function
{
    check_stop_dependency_and_init
    for i in $projects; do
        if [ "${project_pids[${network}_${i}_pid]}" ]; then
            read_confirmation_and_stop $network $i "${project_pids[${network}_${i}_pid]}"
        else
            info "There is no ${network} ${i} running process."
        fi
    done
}

function init_http_port
{
    local http_port=$(grep "HTTPPort" "${1}" | awk -F "=" '{print $2}' | tr -d '[:space:]')
    echo "$http_port"
}

function restart_function
{
    stop_function
    for key in "${!project_pids[@]}"; do
        unset project_pids["$key"]
    done
    start_function
}

function update_function
{
    check_versions_flag
    check_update_dependency
    rm -rf $download_path
    mkdir -p $path/download
    for i in $projects; do
        download_binaries_and_extract $i
    done
    download_bahamut_script
    rm -rf $download_path
}

function execution_syncing_status
{
    if [ ${project_pids["${1}_${2}_pid"]} ]; then
        check_config
        local f=$(get_config_file $1)
        local http_port=$(init_http_port ${f})
        echo -ne $(info "The ${1} ${2} running: pid="${project_pids[${1}_${2}_pid]}",")
        local execution_json=$(curl -s \
        -H "Content-Type: application/json" \
        -X POST \
        --data '{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}' \
        127.0.0.1:${http_port})
        if [ 0 -eq $? ]; then
            if echo "$execution_json" | grep -q '"result":false'; then
                echo " and full synced."
            else
                local highestBlock=$(echo "$execution_json" | grep -o '"highestBlock":"[^"]*"' | cut -d '"' -f 4)
                local currentBlock=$(echo "$execution_json" | grep -o '"currentBlock":"[^"]*"' | cut -d '"' -f 4)
                local decimal_highestBlock=$(printf "%d" "$highestBlock")
                local decimal_currentBlock=$(printf "%d" "$currentBlock")
                local result=$((decimal_currentBlock * 100 / decimal_highestBlock))
                echo " and syncing ${result}%."
            fi
        else
            info "Waiting to connect with peers"
        fi
    else
        info "The ${1} ${2} stopped."
    fi
}

function consensus_syncing_status
{
    if [ ${project_pids["${1}_${2}_pid"]} ]; then
        echo -ne $(info "The ${1} ${2} running: pid="${project_pids[${1}_${2}_pid]}",")
        local consensus_json=$(curl -s 127.0.0.1:${ports[${1}.grpc-gateway-port]}/eth/v1/node/syncing)
        if [ 0 -eq $? ]; then
            if echo "$consensus_json" | grep -q '"is_syncing":false'; then
                echo " and full synced."
            else
                local headSlot=$(echo "$consensus_json" | grep -o '"head_slot":"[^"]*"' | cut -d '"' -f 4)
                local syncDistance=$(echo "$consensus_json" | grep -o '"sync_distance":"[^"]*"' | cut -d '"' -f 4)
                local decimal_headSlot=$(printf "%d" "$headSlot")
                local decimal_syncDistance=$(printf "%d" "$syncDistance")
                local block_sum=$((decimal_headSlot + decimal_syncDistance))
                local result=$((decimal_headSlot * 100 / block_sum))
                echo " and syncing ${result}%."
            fi
        else
            info "Waiting to connect with peers"
        fi
    else
        info "The ${1} ${2} stopped."
    fi
}

function status_function
{
    check_status_dependency
    for i in $network_name; do
        for j in $projects; do
            !(${j}_syncing_status $i $j)
        done
    done
}

${action}_function
